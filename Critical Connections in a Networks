class Solution 
{
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) 
    {
       vector<int> graph[n];
        for(auto edge:connections)
        {
            int u = edge[0];
            int v= edge[1];
            
            graph[v].push_back(u);
            graph[u].push_back(v);
        }
        return findCriticalConnections(n,graph);
    }
private:
    vector<vector<int>>findCriticalConnections(int n,vector<int>graph[])
    {
        vector<int>disTime(n,-1);
        vector<int>minTime(n,-1);
        
        vector<int>Time={0};
        vector<vector<int>>answer;
        tarjansDFS(graph,0, -1,disTime,minTime,Time,answer);
        return answer;
    }
private:
    void tarjansDFS(vector<int>graph[],int currentVertex,int currentParent,vector<int>&disTime,vector<int>&minTime,vector<int>&Time,vector<vector<int>>&answer)
    {
        
        disTime[currentVertex]=Time[0];
        minTime[currentVertex]=Time[0];
        Time[0]+=1;
        
        for(int neigh:graph[currentVertex])
        {

                if(neigh==currentParent)
                    continue;
                if(disTime[neigh]!=-1)
                {
                    minTime[currentVertex ] = min(minTime[currentVertex],disTime[neigh]);
                    continue;
                }
                tarjansDFS(graph,neigh,currentVertex,disTime,minTime,Time,answer);
                minTime[currentVertex]=min(minTime[currentVertex],minTime[neigh]);
                
                if(disTime[currentVertex]<minTime[neigh])
                {
                    vector<int>temp;
                    temp.push_back(currentVertex);
                    temp.push_back(neigh);
                    answer.push_back(temp);
                
            }
        }
        return ;
    }

};
