
int numDistinct(string s, string t) {
        int n=s.size(),m=t.size();
        
        unsigned long long dp[n+1][m+1];
        memset(dp,0,sizeof(dp));
        dp[0][0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                if(j==0)
                    dp[i][j]=1;
                else
                {
                    if(s[i-1]==t[j-1])
                        dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
                    else
                        dp[i][j]=dp[i-1][j];
                }
            }
        }
        return (int)dp[n][m];
        
    }
	
	// Using 1d array dp and used a variable pre to keep track of previous indexed data
	
	 int numDistinct(string s, string t) {
        int n=s.size(),m=t.size();
        
        unsigned long long dp[m+1];
        memset(dp,0,sizeof(dp));
        dp[0]=1;
        int pre=0;
        for(int i=1;i<=n;i++)
        {
            pre=1;
            for(int j=1;j<=m;j++)
            {
               int temp=dp[j];
                
               if(s[i-1]==t[j-1])
                 dp[j]+=pre; 
                
                pre=temp;
            }
        }
        return (int)dp[m]; 
    }
	
	
	// We can also ignore the extra varible, if we iterate the inner loop from last to first, i.e, from m to 1
	
	int numDistinct(string s, string t) {
        int n=s.size(),m=t.size();
        
        vector<unsigned long long>dp(m+1,0);
        dp[0]=1; 
        for(int i=1;i<=n;i++)
        { 
            for(int j=m;j>=1;j--)
            { 
               if(s[i-1]==t[j-1])
                 dp[j]+=dp[j-1];  
            }
        }
        return (int)dp[m]; 
    }
