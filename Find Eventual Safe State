class Solution 
{
public:
    vector<int> vis;
    vector<bool> curr;
    bool helper(vector<vector<int>>& graph,int x)
    {
        if(vis[x] == false || curr[x])
            return false;
        if(graph[x].size() == 0)
            return true;
        if(vis[x] != -1)
            return vis[x];
        curr[x] = true;
        for(auto &it : graph[x])
            if(!helper(graph,it))
            {
                curr[x] = false;
                return vis[x] = false;
            }
        curr[x] = false;
        return vis[x] = true;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) 
    {
        int n = graph.size();
        vis.resize(n,-1);
        curr.resize(n,false);
        for(int i = 0 ; i < n ; i++)
            helper(graph,i);
        vector<int> ans;
        for(int i = 0 ; i < n ; i++)
            if(vis[i])
                ans.push_back(i);
        return ans;
    }
};
