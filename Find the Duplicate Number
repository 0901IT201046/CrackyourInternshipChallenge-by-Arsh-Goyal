/* Find the Duplicate Number 
Date:- 07/05/21 */

//APPROACH 1

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int i;
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int c=0;
        for(i=0;i<n-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                c = nums[i];
            }
        }
        return c;
    }
};

// APPROACH 2

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       int low = 1, high = nums.size() - 1, cnt;
        
        while(low <=  high)
        {
            int mid = low + (high - low) / 2;
            cnt = 0;
            // cnt number less than equal to mid
            for(int n : nums)
            {
                if(n <= mid)
                    ++cnt;
            }
            // binary search on left
            if(cnt <= mid)
                low = mid + 1;
            else
            // binary search on right
                high = mid - 1;
            
        }
        return low;
    }
};
