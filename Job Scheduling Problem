/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,[](Job a ,Job b)
        {
         if(a.profit ==b.profit) 
            return a.dead > b.dead ;
         return a.profit > b.profit ;
        });
     
     vector<int> occupied(101,0);
     int count=0;
     for(int i=0; i<n;i++)
     {
         int d = arr[i].dead;
         while(d>0 && occupied[d]) 
            d--;
         if(d>0)
         {
             count++;  
             occupied[d] = arr[i].profit;
             
         }
     }
     
     int sum = accumulate(occupied.begin(),occupied.end(),0);
     
    return{ count,sum} ;
    } 
};
