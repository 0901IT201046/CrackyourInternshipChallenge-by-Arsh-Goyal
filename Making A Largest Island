class Solution 
{
public:
    int dir[5] = {-1, 0, 1 ,0, -1};
    int largestIsland(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        unordered_map<int, int> mp;
        int index = 2;
        int maxi_area = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                if(grid[i][j] == 1)
                {
                    int area = dfs(i, j, index, grid, n);
                    mp[index++] = area;
                    maxi_area = max(maxi_area, area);
                }
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 0)
                {
                    set<int> st;
                    
                    for(int k = 0; k < 4; k++)
                    {
                        int ni = i + dir[k];
                        int nj = j + dir[k + 1];
                        
                        if(ni < n && ni >= 0 && nj < n && nj >= 0 && grid[ni][nj] != 0)
                            st.insert(grid[ni][nj]);
                    }
                    
                    int tot = 1;
                    for(auto it: st)
                    {
                        tot += mp[it];
                    }
                    
                    maxi_area = max(maxi_area, tot);
                }
            }
        }
        return maxi_area;
    }
    
    int dfs(int i, int j, int index, vector<vector<int>>& grid, int n)
    {
        if(i >= n || i < 0 || j >= n || j < 0 || grid[i][j] != 1) 
            return 0;
        int area = 0;
        grid[i][j] = index;
        for(int k = 0; k < 4; k++)
        {
            int ni = i + dir[k];
            int nj = j + dir[k + 1];
            
            area += dfs(ni, nj, index, grid, n);
        }
        return area + 1;
        
    }
};
