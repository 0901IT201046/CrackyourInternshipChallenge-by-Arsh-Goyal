class Solution
{
	public:
	long long getCount(int N)
	{
		vector<vector<int>> gr = 
		{
		    {0, 8},
		    {1, 2, 4},
		    {2, 1, 3, 5},
		    {3, 2, 6},
		    {4, 1, 5, 7},
		    {5, 2, 4, 6, 8},
		    {6, 3, 5, 9},
		    {7, 8, 4},
		    {8, 5, 7, 9, 0},
		    {9, 6, 8}
		};
		vector<vector<long long>> dp(30, vector<long long>(10, -1));
		auto f = [&](int key, int length_required_more, auto &f) -> long long 
		{
		    if (length_required_more == 0) 
		    {
		        return 1;
		    }
		    if(dp[length_required_more][key] != -1) 
		    {
		        return dp[length_required_more][key];
		    }
		    long long ans = 0;
		    for(auto next_key: gr[key]) 
		    {
		        ans += (f(next_key, length_required_more - 1, f));
		    }
		    return dp[length_required_more][key] = ans;
		};
        long long ret = 0;
        for(int x = 0; x <= 9; x++) 
        {
            ret += (f(x, N - 1, f));
        }
        return ret;
	}


};
