class Solution 
{
public:
    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> ans;
        vector<string> board(n);
        string str(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=str;
        }
        vector<int> leftrow(n,0),ldiagonal(2*n-1,0),udiagonal(2*n-1,0);
        solve(0,board,ans,leftrow,ldiagonal,udiagonal,n);
        return ans;
    }
    void solve(int col,vector<string>& board,vector<vector<string>>& ans,vector<int>& leftrow,vector<int>& ldiagonal,vector<int>& udiagonal,int n)
    {
        if(col==n)
        {
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(leftrow[row]==0 && ldiagonal[row+col]==0 && udiagonal[n-1+col-row]==0)
            {
                board[row][col]='Q';
                leftrow[row]=1;
                ldiagonal[row+col]=1;
                udiagonal[n-1+col-row]=1;
                solve(col+1,board,ans,leftrow,ldiagonal,udiagonal,n);
                board[row][col]='.';
                leftrow[row]=0;
                ldiagonal[row+col]=0;
                udiagonal[n-1+col-row]=0;
            }
        }
    }
};
