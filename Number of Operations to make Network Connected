class Solution 
{
public:
    void dfs(int src, vector<vector<int>> &graph, vector<bool> &vis)
    {
        vis[src] = true;
        for(auto nbr : graph[src])
        {
            if(vis[nbr]==false)
            {
                dfs(nbr ,graph,vis);
            }
        }
        return ;
    } 
    int makeConnected(int n, vector<vector<int>>& connections) 
    {
        if(connections.size() < n-1)
        {
            return -1;
        }
        vector<vector<int>> graph(n);
        for(int i = 0 ; i < connections.size() ; i++)
        {
            int u = connections[i][0];
            int v = connections[i][1];
            graph[u].push_back(v);
            graph[v].push_back(u);
        }
        vector<bool> vis(n,false);
        int number_of_connected_components = 0;
        for(int i = 0 ; i < n ; i++)
        {
            if(vis[i]==false)
            {
                 dfs(i,graph,vis);
                number_of_connected_components+=1;
            }
        }
        return number_of_connected_components-1;
    }
}; 
