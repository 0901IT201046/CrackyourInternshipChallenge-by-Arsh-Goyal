class Solution 
{
public:
void dfs(int node,int par, map<int,vector> &graph,vector &ans)
{
	ans.push_back(node);
	for(int child : graph[node])
  {
	if(child == par)
    continue;
	dfs(child,node,graph,ans);
	}
}

vector<int> restoreArray(vector<vector<int>>& adjacentPairs) 
{
	vector<int> ans;
	int n = adjacentPairs.size();
	map<int,int> m;
	map<int,vector<int>> graph; 
	for(int i=0;i<n;i++)
  {
		int u = adjacentPairs[i][0];
		int v = adjacentPairs[i][1];
		m[u]++;
		m[v]++;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}
	int start;
	for(auto it : m)
  {
		if(it.second == 1)
    {
			start = it.first;
			break;
		}
	}
	dfs(start,-100005,graph,ans);
	return ans;
}
};
