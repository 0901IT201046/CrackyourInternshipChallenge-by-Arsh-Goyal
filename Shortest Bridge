class Solution 
{
public:
    
    void dfs(vector<vector<int>>& grid, int i, int j, vector<pair<int,int>>& k)
    {
        if(i<0 || j<0 || i>=grid.size() || j>= grid[0].size() || grid[i][j] == 0)
            return;
          grid[i][j] = 0;

        k.push_back(make_pair(i,j));

        dfs(grid, i+1, j, k);
        dfs(grid, i-1, j, k);
        dfs(grid, i, j+1, k);
        dfs(grid, i, j-1, k);
    }
    
    int shortestBridge(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        
        vector<pair<int,int>> x;
        vector<pair<int, int>> y;
        
        int count =0;
        for(int i = 0; i<n; i++)
        {
            for(int j = 0; j<m; j++)
            {

                if(grid[i][j] == 1)
                {
                    count++;

                        if(count == 1)
                        {
                            dfs(grid, i, j, x);
                        }
                        else if (count == 2)
                        {
                            dfs(grid, i, j, y);
                        }
                    }
                }
        }

        int mindistance = INT_MAX;
        for(int i = 0; i<x.size(); i++)
        {
            for(int j = 0; j<y.size(); j++)
            {

            int dis= abs(x[i].first - y[j].first) + abs(x[i].second - y[j].second) -1 ;

                 if(dis < mindistance)
                    mindistance = dis;
            }
        }
        return mindistance;
    }
};
