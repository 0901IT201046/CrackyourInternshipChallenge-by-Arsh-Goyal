/* Structure of linked list Node

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
};

*/

//You are required to complete this method
Node*rev(Node*head)
{
    Node*c = head;
    Node*p = NULL;
    Node*n = NULL;
    while(c){
        n = c->next;
        c->next = p;
        p = c;
        c = n;
    }
    head = p;
    return head;
}
Node*sub(Node*a,Node*b)
{
    a = rev(a);
    b = rev(b);
    Node*l2 = b;
    Node*l1 = a;
    Node*ans = new Node(0);
    Node*t = ans;
    while(l1->next and l2->next)
    {
        l1 = l1->next;
        l2 = l2->next;
    }
    while(l1->next){
        Node*n = new Node(0);
        l2->next = n;
        l2 = l2->next;
        l1 = l1->next;
    }
    int r = 0; 

    l1 = a;
    l2 = b;
    
    while(l1 and l2)
    {
        int x = (l1->data)-(l2->data);
        if(x-r>=0){
            Node*n = new Node(x-r);
            t->next = n;
            t = t->next;
            r = 0;
        }
        else{
            int z = (x-r+10);
            Node*n = new Node(z);
            t->next = n;
            t = t->next;
            r = 1;
        }
        l1 = l1->next;
        l2 = l2->next;
    }
    Node*res = ans->next;
    
    res = rev(res);
    if(res->data==0) return res->next; 
    
    return res;
}

Node* subLinkedList(Node* l1, Node* l2)
{
    if(l1->next == NULL and l1->data==0) return l2;
    if(l2->next == NULL and l2->data==0) return l1;

    while(l1->data==0) l1 = l1->next;
    while(l2->data==0) l2 = l2->next;
    Node*t1 = l1;
    Node*t2 = l2;
    
    int a = 0;
    while(t1)
    {
        a++;
        t1 = t1->next;
    }
    int b = 0;
    while(t2)
    {
        b++;
        t2 = t2->next;
    }
    
    if(a>b)
    {
        return sub(l1,l2);
    }
    else if(a<b)
    {
        return sub(l2,l1);
    }
    else{
        while(l1 and l2)
        {
            if(l1->data>l2->data)
            {
                return sub(l1,l2);
            }
            else if(l1->data<l2->data)
            {
                return sub(l2,l1);
            }
            else{
                l1 = l1->next;
                l2 = l2->next;
            }
        } 
        Node*n = new Node(0);
        n->next = NULL;
        return n;
    }
    return NULL;
}
