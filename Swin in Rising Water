class Solution {
public:
    int dx[4][2]={{1,0},{0,1},{0,-1},{-1,0}}; 
    int swimInWater(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        vector<vector<int>>dis(n,vector<int>(n,INT_MAX));
        if(n==1)
          return 0;
        priority_queue<pair<int,pair<int,int>>>Q;
        Q.push({-grid[0][0],{0,0}}); 
        int ans=0;
        while(Q.size()>0)
        {
            int t = -Q.top().first;   
			
            int x = Q.top().second.first;
            int y = Q.top().second.second;
            Q.pop();
            for(int i=0;i<4;i++)
            {
                int xx = x+dx[i][0];
                int yy = y+dx[i][1];
                if(xx<n and yy<n and xx>-1 and yy>-1)
                {
                    int time = max(t , grid[xx][yy]);
                    if(dis[xx][yy] > time)
                    { 
                        dis[xx][yy]=time;
                        Q.push({-dis[xx][yy],{xx,yy}}); 
                    }
                }
            }
        }
        return dis[n-1][n-1];
    }
};
