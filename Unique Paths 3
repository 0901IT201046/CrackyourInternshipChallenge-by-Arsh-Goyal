class Solution {
public:
    bool isvalid(vector<vector<int>>& g,vector<vector<int>>& v,int n, int m)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(g[i][j]!=-1 && g[i][j]!=2 &&v[i][j]==0)
                    return false;
            }
        }
        return true;
    }
    int check(vector<vector<int>> &g,vector<vector<int>>& v,int i,int j,int n, int m)
    {
        if(i>=0 && j>=0 && i<n && j<m)
        {
            if(g[i][j]==2){
                if(isvalid(g,v,n,m))
                    return 1;
                else
                    return 0;
            }
            if(g[i][j]==-1)
                return 0;
            int count=0;
            if(v[i][j]==0)
            {
                v[i][j]=1;
                count = count + check(g,v,i-1,j,n,m)
                              + check(g,v,i+1,j,n,m) 
                              + check(g,v,i,j-1,n,m) 
                              + check(g,v,i,j+1,n,m);
                v[i][j]=0;
            }
            return count;
        }
        else
            return 0;
        
    }
    int uniquePathsIII(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> v(n,vector<int> (m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    return check(grid,v,i,j,n,m);
                }
            }
        }
        return 0;
    }
};
